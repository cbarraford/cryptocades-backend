FORMAT: 1A
HOST: https://localhost:8080

# Lotto API

## Authentication
To authenticate on the API, you must get a session token via hitting the `/login` endpoint and authenticating with a username and password. Once you have a token, you canauthenticate by passing the token in a http request header, `Session`. Sessions expire after 30 days.

# Group Ping
Ping the API to validate its up

## Ping [/ping]

### Ping [GET]
No authentication is required for this endpoint.

+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + message (string)

# Group Login
Log into the API and create a session token.

## Login [/login]

### Login [POST]
Log into the API and receive a session token

+ Request (application/json; charset=utf-8)
    + Attributes
        + username: user's username (required)
        + password: user's password (required)
+ Response 200 (application/json; charset=utf-8)
    + Attributes (Session)

# Group Logout
Logout of the API (destroying the session token)

## Logout [/logout]

### Logout [DELETE]
Logout of the API.

+ Response 200 (application/json; charset=utf-8)


# Group Me
Get the user object of the currently logged in user

## Me [/me]

### Me [GET]

+ Response 200 (application/json; charset=utf-8)
    + Attributes (User)

### Update [PUT]

+ Request (application/json; charset=utf-8)
    + Attributes 
        + btc_address: bitcoin address (optional)
        + password: password (optional)
+ Response 200 (application/json; charset=utf-8)
    + Attributes (User)

### Delete [DELETE]
Delete the authenticated user

+ Response 200 (application/json; charset=utf-8)

## My Email [/me/email]

### Change email [PUT]

+ Request (application/json; charset=utf-8)
    + Attributes 
        + email: email (required)
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + message (string)

## My Balance [/me/balance]

### Balance [GET]

+ Response 200 (application/json; charset=utf-8)
    + Attributes 
        + balance: account balance (required)

## My Entries [/me/entries]

### Entries [GET]

+ Response 200 (application/json; charset=utf-8)
    + Attributes (array[Entry])

# Group Users
Get and manage users

## Create [/users]

### Create [POST]

+ Request (application/json; charset=utf-8)
    + Attributes 
        + username: username (required)
        + password: password (required)
        + email: email (required)
+ Response 200 (application/json; charset=utf-8)
    + Attributes (User)


# Group Confirmations
Confirm a user

## Confirm [/users/confirmation/{code}]

+ Parameters
    + code: anbh892hg70h (string, required) - The confirmation code

### Confirm [POST]
Confirm a user's email address via given confirmation code

+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + message (string)


# Group Password Reset
Reset a user password

## Trigger Password Reset [/users/password_reset]

### Trigger Password Reset [POST]
Send a password reset email address to given email address

+ Request (application/json; charset=utf-8)
    + Attributes 
        + email: email (required)
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + message (string)

## Reset Password [/users/password_reset/{code}]

+ Parameters
    + code: anbh892hg70h (string, required) - The password reset code

### Reset Password [POST]
Change the password to given password in body

+ Request (application/json; charset=utf-8)
    + Attributes 
        + password: password (required)
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + message (string)


# Group Games

## Games [/games]

### List Games [GET]
List games

+ Response 200 (application/json; charset=utf-8)
    + Attributes (array[Game])


# Group Jackpots

## Jackpots [/jackpots]

### List Jackpots [GET]
List jackpots

+ Response 200 (application/json; charset=utf-8)
    + Attributes (array[Jackpot])

## Jackpot [/jackpots/{jackpot_id}/odds]

+ Parameters
    + jackpot_id: 1 (number, required) - The id of a specific jackpot

### Odds [GET]
Retrieve the odds of a specific jackpot

+ Response 200 (application/json; charset=utf-8)
    + Attributes (Odds)

## Jackpot [/jackpots/{jackpot_id}/enter]

+ Parameters
    + jackpot_id: 1 (number, required) - The id of a specific jackpot

### Enter [POST]
Enter a jackpot

+ Request (application/json; charset=utf-8)
    + Attributes 
        + amount: amount (required)
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + message (string)


## Data Structures

### Game
+ id: 1 (number) - {LONG} unique identifier
+ name: funtime (string) - Name of the game
+ description: play the game to earn lotto tickets (string) - Description of the game

### Jackpot
+ id: 1 (number) - {LONG} unique identifier
+ jackpot: 100 (number) - Amount of money to win (in USD)
+ winner_id: 4857 (number) - {LONG} the id of the winning user
+ end_time: `2017-07-14T03:18:29.502661Z` (string) - timestamp of when the jackpot is ending.
+ created_time: `2017-07-14T03:18:29.502661Z` (string) - timestamp of jackpot creation
+ updated_time: `2017-07-14T03:18:29.502661Z` (string) - timestamp of jackpot updated

### Odds

+ jackpot_id: 1 (number) - {LONG} the unique identifier for a jackpot
+ total: 13 (number) - {LONG} the total number of entries into the jackpot
+ entries: 2 (number) - {LONG} the number of entries the authenticating user has

### Entry
+ id: 1 (number) - {LONG} unique identifier
+ jackpot_id: 4 (number) - {LONG} jackpot unique identifier
+ user_id: 5 (number) - {LONG} user unique identifier
+ amount: 44 (number) - {LONG} total amount spent on this specific jackpot

### Session
+ id: 1 (number) - {LONG} unique identifier
+ user_id: 3 (number) - {LONG} unique identifier for associated user
+ token: 2hfniu5hsuus80 (string) - Token for sessions. Use this in subsequent API calls for authentication.
+ created_time: `2017-07-14T03:18:29.502661Z` (string) - timestamp of session creation
+ expire_time: `2017-07-14T03:18:29.502661Z` (string) - timestamp of session expires
+ escalated_time: `2017-07-14T03:18:29.502661Z` (string) - timestamp sessions has to use escalated privileges before they are lost. Some API endpoints require escalated privileges

### User
+ id: 1 (number) - {LONG} unique identifier
+ btc_address: 1MiJFQvupX5kSZcUtfSoD9NtLevUgjv3uq (string) - Bitcoin Address
+ username: cbarraford (string) - Username
+ email: chad@rstudio.com (string) - email address
+ mined_hases: 7847 number - {LONG} Number of mined hashes. This increases the more a person mines.
+ bonus_hashes: 72 number - {LONG} Number of bonus hashes. This is hashes awarded to a user by accomplishing something.
+ created_time: `2017-07-14T03:18:29.502661Z` (string) - timestamp of user creation
+ updated_time: `2017-07-14T03:18:29.502661Z` (string) - timestamp of user updated
